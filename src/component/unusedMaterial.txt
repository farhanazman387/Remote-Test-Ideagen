from filter

if (checkedId.includes("all")){
            //replace and get new id for its element
            var newId = checkedId.replace('all','');
            newId = '#' + newId + 'opt';
            $(newId).each((index,elem) => {
                elementId
                .push(elem.id);
            });
            console.log(elementId);
            if(isCheck){
                elementId.forEach((cbElem,i) => {
                    $('#'+cbElem).setAttribute('checked','true');
                });
                //check all other element and store in array
            }
            else{
                elementId.forEach((cbElem,i) => {
                    $('#'+cbElem).setAttribute('checked','false');
                });
                //uncheck all other element
            }
        }

        const [checkedState, setCheckedState] = useState(
    new Array(toppings.length).fill(false)
);

var newIsChecked = new Array(uStatus.length).fill(false);

            setIsChecked(isChecked.concat(newIsChecked));
            console.log(isChecked);

    // const [dataFilters, setDataFilters] = useState([]);

    // const [isCheckecCD, setIsCheckecCD] = useState();
    // const [isCheckecCN, setIsCheckecCN] = useState();
    // const [isCheckecS, setIsCheckecS] = useState();
    // const [isCheckecCat, setIsCheckecCat] = useState();
    // const [isCheckecCou, setIsCheckecCou] = useState();

    const [isChecked, setIsChecked] = useState([]);

    switch(checkedId){
                case 'datemain':
                    setFilters([...filters,{
                        type:checkedVal,
                        value:filter
                    }]);
                    break;
                case 'customersmain':
                    setFilters([...filters,{
                        type:checkedVal,
                        value:filter
                    }]);
                    console.log('filters set');
                    break;
                case 'statusmain':
                    setFilters([...filters,{
                        type:checkedVal,
                        value:filter
                    }]);
                    break;
                case 'categorymain':
                    setFilters([...filters,{
                        type:checkedVal,
                        value:filter
                    }]);
                    break;
                case 'countrymain':
                    setFilters([...filters,{
                        type:checkedVal,
                        value:filter
                    }]);
                    break;
                default:
                    break;
            }


                // objIndex = filters.findIndex((obj => obj.type == "customer_name"));
                // if(objIndex != null || objIndex < 0){
                //     // filters[objIndex].value.push(checkedVal);
                //     filters[objIndex].value = filter;
                //     console.log(filters);
                // }



    const handleOptChange = e => {
        let selectedVal = e.target.value;
        let idSelect = e.target.id;
    }

     //no 2
        this.state.filteredResult = this.state.orders.filter(function(oritable) {
            for (var key in filterList) {
                console.log(oritable[key]);
                console.log(filterList[key]);
                if (oritable[key] === undefined || oritable[key] != filterList[key])
                    return false;
                }
                return true;
            });

// createdDate
        // this.state.filteredResult = array.filter(e => e.createdDate >= x && e.createdDate <= y)
        //check exist in filter
        // let isCNexist=this.isExist("customer_name",filterList);
        // if(isCNexist){
        //     var index = filterList.findIndex(i => i.type === "customer_name");
        
        //     let row = filterList[index];
        //     let customer = row["value"];
        //     this.state.filteredResult = this.state.orders.filter(e => e.customer_name === customer);
        // }